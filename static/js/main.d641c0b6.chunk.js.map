{"version":3,"sources":["api/api.ts","components/TodosList.tsx","components/Buttons.tsx","App.tsx","index.tsx"],"names":["getTodos","a","Promise","all","fetch","then","response","json","todosData","usersData","map","todo","userCatalog","find","user","userId","id","TodosList","todos","key","className","cn","todo__completed","completed","title","name","Buttons","buttonsInit","event","type","onClick","App","useState","setTodos","loading","setLoading","visibleSortButtons","setVisibleSortButtons","sort","b","localeCompare","setTimeout","todosFromServer","finally","ReactDOM","render","document","getElementById"],"mappings":"ySAaaA,EAAQ,uCAAG,kCAAAC,EAAA,sEACeC,QAAQC,IAAI,CAV1CC,MAAM,GAAD,OAJU,+CAKnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OARU,+CASnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAGP,0CACfC,EADe,KACJC,EADI,uBAGfD,EAAUE,KAAI,SAACC,GACpB,IAAMC,EAAcH,EAAUI,MAAK,SAACC,GAAD,OAA0BH,EAAKI,SAAWD,EAAKE,MAElF,OAAO,2BACFL,GADL,IAEEC,oBARkB,2CAAH,qD,iBCNRK,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,oCACGA,EAAMR,KAAI,SAAAC,GAAI,OACb,yBACEQ,IAAKR,EAAKK,GACVI,UAAWC,IAAG,aAAc,CAC1BC,gBAAiBX,EAAKY,aAGxB,uBAAGH,UAAU,eACVT,EAAKa,OAER,2BACGb,EAAKC,YAAYa,MAEpB,2BACGd,EAAKY,UAAY,YAAc,uBClB/BG,EAA2B,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACzC,OACE,yBAAKP,UAAU,iBACZO,EAAYjB,KAAI,gBAAGM,EAAH,EAAGA,GAAIQ,EAAP,EAAOA,MAAOI,EAAd,EAAcA,MAAd,OACf,4BACEC,KAAK,SACLV,IAAKH,EACLI,UAAU,kCACVU,QAAS,kBAAMF,MAEdJ,QCkDIO,EA3DH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTd,EADS,KACFe,EADE,OAEcD,oBAAkB,GAFhC,mBAETE,EAFS,KAEAC,EAFA,OAGoCH,oBAAkB,GAHtD,mBAGTI,EAHS,KAGWC,EAHX,KA6BVV,EAAwB,CAC5B,CAAEX,GAAI,EAAGQ,MAAO,gBAAiBI,MAbX,WACtBK,EAAS,YAAIf,GAAOoB,MAAK,SAACrC,EAAGsC,GAAJ,OAAUtC,EAAEuB,MAAMgB,cAAcD,EAAEf,aAa3D,CAAER,GAAI,EAAGQ,MAAO,mBAAoBI,MAVV,WAC1BK,EAAS,YAAIf,GAAOoB,MAAK,SAACrC,EAAGsC,GAAJ,OAAWtC,EAAEsB,WAAagB,EAAEhB,gBAUrD,CAAEP,GAAI,EAAGQ,MAAO,eAAgBI,MAPX,WACrBK,EAAS,YAAIf,GAAOoB,MAAK,SAACrC,EAAGsC,GAAJ,OAAUtC,EAAEW,YAAYa,KAAKe,cAAcD,EAAE3B,YAAYa,aASpF,OACE,oCACE,qDAEEW,EACI,kBAAC,EAAD,CAAST,YAAaA,IACtB,4BAAQE,KAAK,SAAST,UAAU,eAAeU,QApClC,WACrBK,GAAW,GACXE,GAAsB,GACtBI,YAAW,WACTzC,IACGK,MAAK,SAAAqC,GAAe,OAAIT,EAASS,MACjCC,SAAQ,WACPR,GAAW,QAEd,OA2BK,cAGJD,EAEI,yBAAKd,UAAU,gBACb,8BACA,8BACA,8BACA,+BAGF,kBAAC,EAAD,CAAWF,MAAOA,MCxD9B0B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.d641c0b6.chunk.js","sourcesContent":["const API__URL__TODOS = 'https://jsonplaceholder.typicode.com/todos';\nconst API__URL__USERS = 'https://jsonplaceholder.typicode.com/users';\n\nconst todos = () => {\n  return fetch(`${API__URL__TODOS}`)\n    .then(response => response.json());\n};\n\nconst users = () => {\n  return fetch(`${API__URL__USERS}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = async () => {\n  const [todosData, usersData] = await Promise.all([todos(), users()]);\n\n  return todosData.map((todo: TodoFromServer) => {\n    const userCatalog = usersData.find((user: UserFromServer) => todo.userId === user.id);\n\n    return {\n      ...todo,\n      userCatalog,\n    };\n  });\n};\n","import React from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodosList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map(todo => (\n        <div\n          key={todo.id}\n          className={cn('todo__item', {\n            todo__completed: todo.completed,\n          })}\n        >\n          <p className=\"todo__title\">\n            {todo.title}\n          </p>\n          <p>\n            {todo.userCatalog.name}\n          </p>\n          <p>\n            {todo.completed ? 'completed' : 'not completed'}\n          </p>\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  buttonsInit: Button[];\n};\n\nexport const Buttons: React.FC<Props> = ({ buttonsInit }) => {\n  return (\n    <div className=\"todo__buttons\">\n      {buttonsInit.map(({ id, title, event }) => (\n        <button\n          type=\"button\"\n          key={id}\n          className=\"todo__button todo__button--sort\"\n          onClick={() => event()}\n        >\n          {title}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getTodos } from './api/api';\nimport { TodosList } from './components/TodosList';\nimport { Buttons } from './components/Buttons';\n\nconst App = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [visibleSortButtons, setVisibleSortButtons] = useState<boolean>(false);\n\n  const handleGetTodos = () => {\n    setLoading(true);\n    setVisibleSortButtons(true);\n    setTimeout(() => {\n      getTodos()\n        .then(todosFromServer => setTodos(todosFromServer))\n        .finally(() => {\n          setLoading(false);\n        });\n    }, 1000);\n  };\n\n  const handleSortTitle = () => {\n    setTodos([...todos].sort((a, b) => a.title.localeCompare(b.title)));\n  };\n\n  const handleSortCompleted = () => {\n    setTodos([...todos].sort((a, b) => +a.completed - +b.completed));\n  };\n\n  const handleSortUser = () => {\n    setTodos([...todos].sort((a, b) => a.userCatalog.name.localeCompare(b.userCatalog.name)));\n  };\n\n  const buttonsInit: Button[] = [\n    { id: 1, title: 'Sort by title', event: handleSortTitle },\n    { id: 2, title: 'Sort by complete', event: handleSortCompleted },\n    { id: 3, title: 'Sort by user', event: handleSortUser },\n  ];\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {\n        visibleSortButtons\n          ? <Buttons buttonsInit={buttonsInit} />\n          : <button type=\"button\" className=\"todo__button\" onClick={handleGetTodos}>Load Todos</button>\n      }\n      {\n        loading\n          ? (\n            <div className=\"lds-ellipsis\">\n              <div />\n              <div />\n              <div />\n              <div />\n            </div>\n          )\n          : <TodosList todos={todos} />\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}